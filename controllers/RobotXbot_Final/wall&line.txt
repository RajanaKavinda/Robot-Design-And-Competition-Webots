//Including Header files
#include <webots/DistanceSensor.hpp>
#include <webots/Motor.hpp>
#include <webots/Robot.hpp>

#define TIME_STEP 16
#define normal_speed 3


using namespace webots;  
using namespace std;

//line following arrays
float line_follow_error_array[2]={0,0};   //previous_error , Integral
float wall_follow_PID[3]={10,0,0}   //kp,ki,kd

//wall following arrays
float wall_follow_error_array[2]={0,0};   //previous_error , Integral
float waa_follow_PID[3]={1,0,0}   //kp,ki,kd

//robot functions
void line_following();
void wall_following();
double PID(double error,double kp,double ki,double kd);


//object initializing
Robot *robot = new Robot();
DistanceSensor *ir[8];
Motor *motors[4];
DistanceSensor *dis[4];

////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////MAIN FUNCTION////////////////////////////////////

int main(int argc, char **argv) 
{    
      char irNames[8][5] = {"ir1","ir2","ir3","ir4","ir5","ir6","ir7","ir8"};
      for (int i = 0; i < 8; i++) {
        ir[i] = robot->getDistanceSensor(irNames[i]);
        ir[i]->enable(TIME_STEP);
      }
            
      char motor_names[4][9] = {"left_fm", "left_bm","right_fm","right_bm"};
      for (int i = 0; i < 4; i++) {
        motors[i] = robot->getMotor(motor_names[i]);
        motors[i]->setPosition(INFINITY);
        motors[i]->setVelocity(0.0);
      }

      
      char disNames[4][7] = {"us_lb", "us_lf", "us_rf", "us_rb"};
      int dis_readings[4] = {0, 0, 0, 0};
      for (int i = 0; i < 4; i++) {
      dis[i] = robot->getDistanceSensor(disNames[i]);
      dis[i]->enable(TIME_STEP);
//////////////////////////////////////////////////////////////////////////////////  
////////////////////////////MAIN LOOP////////////////////////////////////////////
      while (robot->step(TIME_STEP) != -1){

        cout<<"line following started."<<endl;
        line_following();

      }
      
      delete robot;
      return 0;  // EXIT_SUCCESS   
}




//////////////////////////////////////////////////////////////////////////////
///////////////////////////           FUNCTIONS            ///////////////////

//line following

void line_following()
{  
   int ir_readings[8];
   int coefficient[8]={-4000,-3000,-2000,-1000,1000,2000,3000,4000};

   while (robot->step(TIME_STEP) != -1) {
   
   for (int i = 0; i < 8; i++) {
        if (ir[i]->getValue() <670 ){
          ir_readings[i]=0;
          }
        else{ir_readings[i]=1;  
        }  
    }
  
    double error = 0.0;
    for (int j =0; j<8;j++){
      error=error+ir_readings[j]*coefficient[j];
    }
    
    double correction=PID(error,wall_follow_PID[0],wall_follow_PID[1],wall_follow_PID[2]);
    turnMotors(correction);
    }
}  

//motor turning
void turnMotors(double correction=0)
{
    double left_motor = normal_speed + correction;
    double right_motor = normal_speed - correction;
    
    
    if (left_motor <0.0) {left_motor=0.0;}
    if (left_motor >10.0) {left_motor=10.0;}
    if (right_motor<0.0) {right_motor=0.0;}
    if (right_motor>10.0) {right_motor=10.0;}
    
    
    motors[0]->setVelocity(left_motor);
    motors[1]->setVelocity(left_motor);
    motors[2]->setVelocity(right_motor);
    motors[3]->setVelocity(right_motor);
              
}


//wall following
void wall_following()
{ 
  double error = 0.0;
  int readings[4] = {0, 0, 0, 0}; 
  int coefficient[4] = {-2000, -1000, 1000, 2000};
  while (robot->step(timestep) != -1) {

    // Read distance sensor values
    
    if ((dis[1]->getValue() > dis[2]->getValue()) && dis[0]->getValue() > 100.0) 
    {
      dis_readings[0] = 1;
      dis_readings[1] = 1;
      dis_readings[2] = 0;
      dis_readings[3] = 0;
    } 
    else if ( (dis[2]->getValue() > dis[1]->getValue()) && dis[3]->getValue() > 100.0)
    {
      dis_readings[0] = 0;
      dis_readings[1] = 0;
      dis_readings[2] = 1;
      dis_readings[3] = 1;
    }
    
    else
    {
      dis_readings[0] = 0;
      dis_readings[1] = 0;
      dis_readings[2] = 0;
      dis_readings[3] = 0;
    }   
    
    
    for (int i = 0; i < 4; i++) {  
      readings[i] = dis_readings[i];
      cout<<"ds_sensor "<< i <<" : "<< dis[i]->getValue() <<endl;  //ds[0]=left_bk,ds[1]=left_ft,ds[2]=right_bk,ds[3]=right_ft
    }
    
    for (int i = 0; i < 4; i++) {
      error += coefficient[i] * readings[i];
    }
    
    double correction=PID(error,wall_follow_PID[0],wall_follow_PID[1],wall_follow_PID[2]);
    turnMotors(correction);
}



//PID Function
double PID(double error,double kp,double ki,double kd)
{   
    float integral=line_follow_error_array[1];
    float previous_error=line_follow_error_array[0];
    double P=kp*error;
    double I= (ki*error)+integral;
    double D= kd*(error-previous_error);    
    double correction = (P+I+D)/1000;
    line_follow_error_array[0]=error;
    line_follow_error_array[1]= I;
    return correction;
}